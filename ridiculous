import asyncio
from pyppeteer import launch
async def main():
    browser = await launch()
    page = await browser.newPage()
    await page.goto('https://www.baidu.com')
    s1='#hotsearch-content-wrapper > li:nth-child(1) > a'
    s2='#hotsearch-content-wrapper'
    s3=['#hotsearch-content-wrapper > li:nth-child({}) > a'.format(x) for x in range(1,7)]
    r1='#hotsearch-content-wrapper > li:nth-child(1) > a'
    r2='#hotsearch-content-wrapper > li:nth-child(2) > a'
    r3='#hotsearch-content-wrapper > li:nth-child(3) > a'
    r4='#hotsearch-content-wrapper > li:nth-child(4) > a'
    r5='#hotsearch-content-wrapper > li:nth-child(5) > a'
    r6='#hotsearch-content-wrapper > li:nth-child(6) > a'
    # 获取元素中的文本
    text1 = await page.Jeval(s1, 'el => el.innerText')
    print('text1:',text1) #获取一个文本
    # 获取元素中的文本
    text2 = await page.Jeval(s2, 'el => el.innerText')
    print('text2:',text2) #获取多个文本
    # 获取元素中的链接
    links1 = await page.Jeval(s1, 'el => el.href')
    print('links1:',links1) # 获取一个链接
    # 获取元素中的链接
    for s in s3:
        print(s)
        # links2 = await page.Jeval(s3, 'el => el.href')
        # print('links2:',links2) 
    print(await page.Jeval(r1, 'el => el.href'))
    print(await page.Jeval(r2, 'el => el.href'))
    print(await page.Jeval(r3, 'el => el.href'))
    print(await page.Jeval(r4, 'el => el.href'))
    print(await page.Jeval(r5, 'el => el.href'))
    print(await page.Jeval(r6, 'el => el.href'))
    await browser.close()
asyncio.get_event_loop().run_until_complete(main())
